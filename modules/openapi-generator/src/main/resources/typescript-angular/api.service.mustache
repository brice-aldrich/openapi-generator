{{>licenseInfo}}
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec{{#httpContextInOptions}}, HttpContext {{/httpContextInOptions}}
        }                                                    from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

{{#imports}}
// @ts-ignore
import { {{classname}} } from '{{filename}}';
{{/imports}}

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { {{configurationClassName}} }                                 from '../configuration';
import { BaseService } from '../api.base.service';

{{#operations}}

{{#operation}}
{{#allParams.0}}
/**
 * Parameters for {{nickname}} operation
 */
export interface {{#prefixParameterInterfaces}}{{classname}}{{/prefixParameterInterfaces}}{{operationIdCamelCase}}RequestParams {
{{#queryParams.0}}
  /**
   * Query parameters
   */
  queryParams: {
    {{#queryParams}}
    /**
     * {{description}}
     */
    {{paramName}}{{^required}}?{{/required}}: {{{dataType}}}{{#isNullable}} | null{{/isNullable}};
    {{/queryParams}}
  };
{{/queryParams.0}}
{{#pathParams.0}}
  /**
   * Path parameters
   */
  pathParams: {
    {{#pathParams}}
    /**
     * {{description}}
     */
    {{paramName}}{{^required}}?{{/required}}: {{{dataType}}}{{#isNullable}} | null{{/isNullable}};
    {{/pathParams}}
  };
{{/pathParams.0}}
{{#headerParams.0}}
  /**
   * Header parameters
   */
  headerParams: {
    {{#headerParams}}
    /**
     * {{description}}
     */
    {{paramName}}{{^required}}?{{/required}}: {{{dataType}}}{{#isNullable}} | null{{/isNullable}};
    {{/headerParams}}
  };
{{/headerParams.0}}
{{#bodyParam}}
  /**
   * {{description}}
   */
  body{{^required}}?{{/required}}: {{{dataType}}}{{#isNullable}} | null{{/isNullable}};
{{/bodyParam}}
{{#formParams.0}}
  /**
   * Form parameters
   */
  formParams: {
    {{#formParams}}
    /**
     * {{description}}
     */
    {{paramName}}{{^required}}?{{/required}}: {{{dataType}}}{{#isNullable}} | null{{/isNullable}};
    {{/formParams}}
  };
{{/formParams.0}}
}
{{/allParams.0}}
{{/operation}}

{{#description}}
/**
 * {{&description}}
 */
{{/description}}
{{#isProvidedInNone}}
@Injectable()
{{/isProvidedInNone}}
{{^isProvidedInNone}}
@Injectable({
  providedIn: '{{providedIn}}'
})
{{/isProvidedInNone}}
{{#withInterfaces}}
export class {{classname}} extends BaseService implements {{classname}}Interface {
{{/withInterfaces}}
{{^withInterfaces}}
export class {{classname}} extends BaseService {
{{/withInterfaces}}

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: {{configurationClassName}}) {
        super(basePath, configuration);
    }

{{#operation}}
    /**
{{#summary}}
     * {{&.}}
{{/summary}}
{{#notes}}
     * {{&.}}
{{/notes}}
     {{#allParams.0}}
     * @param requestParameters
     {{/allParams.0}}
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     {{#isDeprecated}}
     * @deprecated
     {{/isDeprecated}}
     */
    public {{nickname}}({{#allParams.0}}requestParameters{{^hasRequiredParams}}?{{/hasRequiredParams}}: {{#prefixParameterInterfaces}}{{classname}}{{/prefixParameterInterfaces}}{{operationIdCamelCase}}RequestParams, {{/allParams.0}}observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: {{#produces}}'{{mediaType}}'{{^-last}} | {{/-last}}{{/produces}}{{^produces}}undefined{{/produces}}{{#httpContextInOptions}}, context?: HttpContext{{/httpContextInOptions}}{{#httpTransferCacheInOptions}}, transferCache?: boolean{{/httpTransferCacheInOptions}}}): Observable<{{#returnType}}{{{returnType}}}{{#isResponseTypeFile}}|undefined{{/isResponseTypeFile}}{{/returnType}}{{^returnType}}any{{/returnType}}>;
    public {{nickname}}({{#allParams.0}}requestParameters{{^hasRequiredParams}}?{{/hasRequiredParams}}: {{#prefixParameterInterfaces}}{{classname}}{{/prefixParameterInterfaces}}{{operationIdCamelCase}}RequestParams, {{/allParams.0}}observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: {{#produces}}'{{mediaType}}'{{^-last}} | {{/-last}}{{/produces}}{{^produces}}undefined{{/produces}}{{#httpContextInOptions}}, context?: HttpContext{{/httpContextInOptions}}{{#httpTransferCacheInOptions}}, transferCache?: boolean{{/httpTransferCacheInOptions}}}): Observable<HttpResponse<{{#returnType}}{{{returnType}}}{{#isResponseTypeFile}}|undefined{{/isResponseTypeFile}}{{/returnType}}{{^returnType}}any{{/returnType}}>>;
    public {{nickname}}({{#allParams.0}}requestParameters{{^hasRequiredParams}}?{{/hasRequiredParams}}: {{#prefixParameterInterfaces}}{{classname}}{{/prefixParameterInterfaces}}{{operationIdCamelCase}}RequestParams, {{/allParams.0}}observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: {{#produces}}'{{mediaType}}'{{^-last}} | {{/-last}}{{/produces}}{{^produces}}undefined{{/produces}}{{#httpContextInOptions}}, context?: HttpContext{{/httpContextInOptions}}{{#httpTransferCacheInOptions}}, transferCache?: boolean{{/httpTransferCacheInOptions}}}): Observable<HttpEvent<{{#returnType}}{{{returnType}}}{{#isResponseTypeFile}}|undefined{{/isResponseTypeFile}}{{/returnType}}{{^returnType}}any{{/returnType}}>>;
    public {{nickname}}({{#allParams.0}}requestParameters{{^hasRequiredParams}}?{{/hasRequiredParams}}: {{#prefixParameterInterfaces}}{{classname}}{{/prefixParameterInterfaces}}{{operationIdCamelCase}}RequestParams, {{/allParams.0}}observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: {{#produces}}'{{mediaType}}'{{^-last}} | {{/-last}}{{/produces}}{{^produces}}undefined{{/produces}}{{#httpContextInOptions}}, context?: HttpContext{{/httpContextInOptions}}{{#httpTransferCacheInOptions}}, transferCache?: boolean{{/httpTransferCacheInOptions}}}): Observable<any> {
{{#allParams.0}}
{{#queryParams.0}}
        // Extract query parameters
        const queryParams = requestParameters?.queryParams || {};
        {{#queryParams}}
        const {{paramName}} = queryParams.{{paramName}};
        {{#required}}
        if ({{paramName}} === null || {{paramName}} === undefined) {
            throw new Error('Required parameter {{paramName}} was null or undefined when calling {{nickname}}.');
        }
        {{/required}}
        {{/queryParams}}
{{/queryParams.0}}

{{#pathParams.0}}
        // Extract path parameters
        const pathParams = requestParameters?.pathParams || {};
        {{#pathParams}}
        const {{paramName}} = pathParams.{{paramName}};
        {{#required}}
        if ({{paramName}} === null || {{paramName}} === undefined) {
            throw new Error('Required parameter {{paramName}} was null or undefined when calling {{nickname}}.');
        }
        {{/required}}
        {{/pathParams}}
{{/pathParams.0}}

{{#headerParams.0}}
        // Extract header parameters
        const headerParams = requestParameters?.headerParams || {};
        {{#headerParams}}
        const {{paramName}} = headerParams.{{paramName}};
        {{#required}}
        if ({{paramName}} === null || {{paramName}} === undefined) {
            throw new Error('Required parameter {{paramName}} was null or undefined when calling {{nickname}}.');
        }
        {{/required}}
        {{/headerParams}}
{{/headerParams.0}}

{{#bodyParam}}
        // Extract body parameter
        const {{paramName}} = requestParameters?.body;
        {{#required}}
        if ({{paramName}} === null || {{paramName}} === undefined) {
            throw new Error('Required parameter {{paramName}} was null or undefined when calling {{nickname}}.');
        }
        {{/required}}
{{/bodyParam}}

{{#formParams.0}}
        // Extract form parameters
        const formParams = requestParameters?.formParams || {};
        {{#formParams}}
        const {{paramName}} = formParams.{{paramName}};
        {{#required}}
        if ({{paramName}} === null || {{paramName}} === undefined) {
            throw new Error('Required parameter {{paramName}} was null or undefined when calling {{nickname}}.');
        }
        {{/required}}
        {{/formParams}}
{{/formParams.0}}
{{/allParams.0}}

{{#hasQueryParamsOrAuth}}
        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
{{#queryParams}}
        {{#isArray}}
        if ({{paramName}}) {
        {{#isCollectionFormatMulti}}
            {{paramName}}.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, '{{baseName}}');
            })
        {{/isCollectionFormatMulti}}
        {{^isCollectionFormatMulti}}
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...{{paramName}}].join(COLLECTION_FORMATS['{{collectionFormat}}']), '{{baseName}}');
        {{/isCollectionFormatMulti}}
        }
        {{/isArray}}
        {{^isArray}}
        if ({{paramName}} !== undefined) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                <any>{{paramName}}, '{{baseName}}');
        }
        {{/isArray}}
{{/queryParams}}

{{/hasQueryParamsOrAuth}}
        let localVarHeaders = this.defaultHeaders;
{{#headerParams}}
        {{#isArray}}
        if ({{paramName}}) {
            localVarHeaders = localVarHeaders.set('{{baseName}}', [...{{paramName}}].join(COLLECTION_FORMATS['{{collectionFormat}}']));
        }
        {{/isArray}}
        {{^isArray}}
        if ({{paramName}} !== undefined && {{paramName}} !== null) {
            localVarHeaders = localVarHeaders.set('{{baseName}}', String({{paramName}}));
        }
        {{/isArray}}
{{/headerParams}}

{{#authMethods}}
        // authentication ({{name}}) required
{{#isApiKey}}
    {{#isKeyInHeader}}
        localVarHeaders = this.configuration.addCredentialToHeaders('{{name}}', '{{keyParamName}}', localVarHeaders);
    {{/isKeyInHeader}}
    {{#isKeyInQuery}}
        localVarQueryParameters = this.configuration.addCredentialToQuery('{{name}}', '{{keyParamName}}', localVarQueryParameters);
    {{/isKeyInQuery}}
{{/isApiKey}}
{{#isBasic}}
    {{#isBasicBasic}}
        localVarHeaders = this.configuration.addCredentialToHeaders('{{name}}', 'Authorization', localVarHeaders, 'Basic ');
    {{/isBasicBasic}}
    {{#isBasicBearer}}
        localVarHeaders = this.configuration.addCredentialToHeaders('{{name}}', 'Authorization', localVarHeaders, 'Bearer ');
    {{/isBasicBearer}}
{{/isBasic}}
{{#isOAuth}}
        localVarHeaders = this.configuration.addCredentialToHeaders('{{name}}', 'Authorization', localVarHeaders, 'Bearer ');
{{/isOAuth}}

{{/authMethods}}
        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
    {{#produces}}
            '{{{mediaType}}}'{{^-last}},{{/-last}}
    {{/produces}}
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

{{#httpContextInOptions}}
        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();
{{/httpContextInOptions}}
{{#httpTransferCacheInOptions}}

        const localVarTransferCache: boolean = options?.transferCache ?? true;
{{/httpTransferCacheInOptions}}

{{#bodyParam}}
{{^hasFormParams}}
        // to determine the Content-Type header
        const consumes: string[] = [
            {{#consumes}}
            '{{{mediaType}}}'{{^-last}},{{/-last}}
            {{/consumes}}
        ];
{{/hasFormParams}}
{{/bodyParam}}
{{#hasFormParams}}
{{^bodyParam}}
        // to determine the Content-Type header
        const consumes: string[] = [
            {{#consumes}}
            '{{{mediaType}}}'{{^-last}},{{/-last}}
            {{/consumes}}
        ];
{{/bodyParam}}
{{/hasFormParams}}
{{#bodyParam}}
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }
{{/bodyParam}}

{{#hasFormParams}}
        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
{{#formParams}}
{{#isFile}}
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        localVarUseForm = canConsumeForm;
{{/isFile}}
{{/formParams}}
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

{{#formParams}}
        {{#isArray}}
        if ({{paramName}}) {
        {{#isCollectionFormatMulti}}
            {{paramName}}.forEach((element) => {
                localVarFormParams = localVarFormParams.append('{{baseName}}{{#useSquareBracketsInArrayNames}}[]{{/useSquareBracketsInArrayNames}}', <any>element) as any || localVarFormParams;
            })
        {{/isCollectionFormatMulti}}
        {{^isCollectionFormatMulti}}
            if (localVarUseForm) {
                {{paramName}}.forEach((element) => {
                    localVarFormParams = localVarFormParams.append('{{baseName}}{{#useSquareBracketsInArrayNames}}[]{{/useSquareBracketsInArrayNames}}', <any>element) as any || localVarFormParams;
                })
            } else {
                localVarFormParams = localVarFormParams.append('{{baseName}}{{#useSquareBracketsInArrayNames}}[]{{/useSquareBracketsInArrayNames}}', [...{{paramName}}].join(COLLECTION_FORMATS['{{collectionFormat}}'])) as any || localVarFormParams;
            }
        {{/isCollectionFormatMulti}}
        }
        {{/isArray}}
        {{^isArray}}
        if ({{paramName}} !== undefined) {
            localVarFormParams = localVarFormParams.append('{{baseName}}', {{^isModel}}<any>{{paramName}}{{/isModel}}{{#isModel}}localVarUseForm ? new Blob([JSON.stringify({{paramName}})], {type: 'application/json'}) : <any>{{paramName}}{{/isModel}}) as any || localVarFormParams;
        }
        {{/isArray}}
{{/formParams}}

{{/hasFormParams}}
    {{^isResponseFile}}
        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

    {{/isResponseFile}}
        let localVarPath = `{{{path}}}`{{#pathParams}}
            .replace(`${"{{baseName}}"}`, encodeURIComponent(String({{paramName}}))){{/pathParams}};
        return this.httpClient.request{{^isResponseFile}}<{{#returnType}}{{{returnType}}}{{#isResponseTypeFile}}|undefined{{/isResponseTypeFile}}{{/returnType}}{{^returnType}}any{{/returnType}}>{{/isResponseFile}}('{{httpMethod}}', `${this.configuration.basePath}${localVarPath}`,
            {
    {{#httpContextInOptions}}
                context: localVarHttpContext,
    {{/httpContextInOptions}}
    {{#bodyParam}}
                body: {{paramName}},
    {{/bodyParam}}
    {{^bodyParam}}
    {{#hasFormParams}}
                body: localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
    {{/hasFormParams}}
    {{/bodyParam}}
    {{#hasQueryParamsOrAuth}}
                params: localVarQueryParameters,
    {{/hasQueryParamsOrAuth}}
    {{#isResponseFile}}
                responseType: "blob",
    {{/isResponseFile}}
    {{^isResponseFile}}
                responseType: <any>responseType_,
    {{/isResponseFile}}
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
    {{#httpTransferCacheInOptions}}
                transferCache: localVarTransferCache,
    {{/httpTransferCacheInOptions}}
                reportProgress: reportProgress
            }
        );
    }

{{/operation}}
}
{{/operations}}